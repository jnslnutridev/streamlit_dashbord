import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from datetime import datetime, timedelta
import base64
from io import BytesIO
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image as RLImage, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard Nutricional",
    page_icon="üçé",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #2E8B57;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem;
    }
    .status-normal { color: #28a745; }
    .status-risk { color: #fd7e14; }
    .status-alert { color: #dc3545; }
</style>
""", unsafe_allow_html=True)

class NutritionDashboard:
    def __init__(self):
        self.data = {}
        
    def load_csv_data(self, file):
        """Carrega e processa os dados do CSV"""
        try:
            # L√™ o arquivo CSV
            content = file.read().decode('utf-8')
            lines = content.strip().split('\n')
            
            current_section = None
            section_data = {}
            
            for line in lines:
                line = line.strip()
                if not line or line.startswith('""'):
                    if current_section and section_data:
                        self.data[current_section] = section_data
                        section_data = {}
                    continue
                
                if ',' not in line:
                    current_section = line
                    section_data = {}
                    continue
                
                parts = line.split(',', 1)
                if len(parts) == 2:
                    key, value = parts[0].strip(), parts[1].strip().strip('"')
                    if value and value != '':
                        try:
                            # Tenta converter para n√∫mero
                            if '.' in value:
                                section_data[key] = float(value)
                            else:
                                section_data[key] = int(value) if value.isdigit() else value
                        except:
                            section_data[key] = value
            
            # Adiciona a √∫ltima se√ß√£o
            if current_section and section_data:
                self.data[current_section] = section_data
                
            return True
        except Exception as e:
            st.error(f"Erro ao carregar arquivo: {str(e)}")
            return False
    
    def get_patient_info(self):
        """Extrai informa√ß√µes b√°sicas do paciente"""
        if 'ADOS DO PACIENTE' in self.data:
            return self.data['ADOS DO PACIENTE']
        return {}
    
    def get_anthropometry_data(self):
        """Extrai dados antropom√©tricos"""
        if 'ANTROPOMETRIA' in self.data:
            return self.data['ANTROPOMETRIA']
        return {}
    
    def get_biochemical_data(self):
        """Extrai dados de exames bioqu√≠micos"""
        if 'EXAMES BIOQU√çMICOS' in self.data:
            return self.data['EXAMES BIOQU√çMICOS']
        return {}
    
    def get_mna_data(self):
        """Extrai dados da avalia√ß√£o MNA"""
        if 'AVALIA√á√ÉO MNA' in self.data:
            return self.data['AVALIA√á√ÉO MNA']
        return {}
    
    def calculate_imc(self):
        """Calcula o IMC"""
        anthro = self.get_anthropometry_data()
        if 'Peso Atual (kg)' in anthro and 'Altura (cm)' in anthro:
            peso = anthro['Peso Atual (kg)']
            altura = anthro['Altura (cm)'] / 100
            return peso / (altura ** 2)
        return None
    
    def classify_imc(self, imc):
        """Classifica o IMC"""
        if imc < 18.5:
            return "Baixo peso", "#dc3545"
        elif 18.5 <= imc < 25:
            return "Normal", "#28a745"
        elif 25 <= imc < 30:
            return "Sobrepeso", "#fd7e14"
        else:
            return "Obesidade", "#dc3545"
    
    def create_anthropometry_chart(self):
        """Cria gr√°fico de dados antropom√©tricos"""
        anthro = self.get_anthropometry_data()
        
        # Dados para compara√ß√£o (valores de refer√™ncia)
        metrics = {
            'Peso Atual': anthro.get('Peso Atual (kg)', 0),
            'Peso Usual': anthro.get('Peso Usual (kg)', 0),
            'Circ. Bra√ßo': anthro.get('Circunfer√™ncia do Bra√ßo (cm)', 0),
            'Circ. Panturrilha': anthro.get('Circunfer√™ncia da Panturrilha (cm)', 0),
            'Gordura Corporal': anthro.get('Percentual de Gordura Corporal (%)', 0)
        }
        
        fig = go.Figure()
        
        fig.add_trace(go.Bar(
            x=list(metrics.keys()),
            y=list(metrics.values()),
            marker_color=['#2E8B57', '#4682B4', '#FF6347', '#32CD32', '#FFD700']
        ))
        
        fig.update_layout(
            title="Dados Antropom√©tricos",
            xaxis_title="Medidas",
            yaxis_title="Valores",
            template="plotly_white"
        )
        
        return fig
    
    def create_biochemical_chart(self):
        """Cria gr√°fico de exames bioqu√≠micos"""
        bio = self.get_biochemical_data()
        
        # Principais marcadores
        markers = {
            'Glicose': bio.get('Glicose (mg/dL)', 0),
            'Colesterol': bio.get('Colesterol total (mg/dL)', 0),
            'HDL': bio.get('HDL (mg/dL)', 0),
            'LDL': bio.get('LDL (mg/dL)', 0),
            'Albumina': bio.get('Albumina (g/dL)', 0) * 10,  # Multiplicado para visualiza√ß√£o
            'Hemoglobina': bio.get('Hemoglobina (g/dL)', 0)
        }
        
        # Valores de refer√™ncia
        reference_values = {
            'Glicose': 100,
            'Colesterol': 200,
            'HDL': 40,
            'LDL': 100,
            'Albumina': 35,  # 3.5 * 10
            'Hemoglobina': 14
        }
        
        fig = go.Figure()
        
        fig.add_trace(go.Bar(
            name='Valores do Paciente',
            x=list(markers.keys()),
            y=list(markers.values()),
            marker_color='#2E8B57'
        ))
        
        fig.add_trace(go.Bar(
            name='Valores de Refer√™ncia',
            x=list(reference_values.keys()),
            y=list(reference_values.values()),
            marker_color='#87CEEB',
            opacity=0.7
        ))
        
        fig.update_layout(
            title="Exames Bioqu√≠micos vs Valores de Refer√™ncia",
            xaxis_title="Marcadores",
            yaxis_title="Valores",
            template="plotly_white",
            barmode='group'
        )
        
        return fig
    
    def create_mna_radar_chart(self):
        """Cria gr√°fico radar da avalia√ß√£o MNA"""
        mna = self.get_mna_data()
        
        categories = []
        values = []
        
        # Mapeia as quest√µes MNA para categorias mais leg√≠veis
        mna_mapping = {
            'A. Nos √∫ltimos tr√™s meses houve diminui√ß√£o da ingesta alimentar devido a perda de apetite, problemas digestivos ou dificuldade para mastigar ou deglutir?': 'Ingesta Alimentar',
            'B. Perda de peso nos √∫ltimos 3 meses': 'Perda de Peso',
            'C. Mobilidade': 'Mobilidade',
            'D. Passou por algum stress psicol√≥gico ou doen√ßa aguda nos √∫ltimos tr√™s meses?': 'Stress/Doen√ßa',
            'E. Problemas neuropsicol√≥gicos': 'Neuropsicol√≥gico',
            'F. √çndice de Massa Corporal (IMC)': 'IMC'
        }
        
        for question, category in mna_mapping.items():
            if question in mna:
                categories.append(category)
                values.append(mna[question])
        
        fig = go.Figure()
        
        fig.add_trace(go.Scatterpolar(
            r=values,
            theta=categories,
            fill='toself',
            name='Avalia√ß√£o MNA',
            line_color='#2E8B57'
        ))
        
        fig.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 3]
                )),
            showlegend=True,
            title="Perfil MNA - Mini Avalia√ß√£o Nutricional"
        )
        
        return fig
    
    def create_nutrition_goals_chart(self):
        """Cria gr√°fico de metas nutricionais"""
        if 'PRESCRI√á√ÉO DIET√âTICA' in self.data and 'HIST√ìRICO ALIMENTAR' in self.data:
            prescription = self.data['PRESCRI√á√ÉO DIET√âTICA']
            history = self.data['HIST√ìRICO ALIMENTAR']
            
            # Metas vs Consumo atual
            nutrients = {
                'Calorias': {
                    'Meta': prescription.get('Meta Cal√≥rica (Kcal/dia)', 0),
                    'Atual': history.get('Total de Calorias', 0)
                },
                'Prote√≠nas': {
                    'Meta': prescription.get('Meta de Prote√≠na (g/dia)', 0),
                    'Atual': history.get('Total de Prote√≠nas', 0)
                },
                'Carboidratos': {
                    'Meta': prescription.get('Meta de Carboidratos (g/dia)', 0),
                    'Atual': history.get('Total de Carboidratos', 0)
                },
                'Gorduras': {
                    'Meta': prescription.get('Meta de Gordura (g/dia)', 0),
                    'Atual': history.get('Total de Gorduras', 0)
                }
            }
            
            categories = list(nutrients.keys())
            metas = [nutrients[cat]['Meta'] for cat in categories]
            atuais = [nutrients[cat]['Atual'] for cat in categories]
            
            fig = go.Figure()
            
            fig.add_trace(go.Bar(
                name='Meta',
                x=categories,
                y=metas,
                marker_color='#4682B4'
            ))
            
            fig.add_trace(go.Bar(
                name='Consumo Atual',
                x=categories,
                y=atuais,
                marker_color='#2E8B57'
            ))
            
            fig.update_layout(
                title="Metas Nutricionais vs Consumo Atual",
                xaxis_title="Nutrientes",
                yaxis_title="Quantidade",
                template="plotly_white",
                barmode='group'
            )
            
            return fig
        
        return None
    
    def generate_pdf_report(self):
        """Gera relat√≥rio em PDF"""
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        story = []
        
        # T√≠tulo
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            textColor=colors.HexColor('#2E8B57'),
            alignment=1
        )
        story.append(Paragraph("Relat√≥rio Nutricional", title_style))
        story.append(Spacer(1, 20))
        
        # Informa√ß√µes do paciente
        patient_info = self.get_patient_info()
        if patient_info:
            story.append(Paragraph("Dados do Paciente", styles['Heading2']))
            
            patient_data = [
                ['Nome:', patient_info.get('Nome', 'N/A')],
                ['Data de Nascimento:', patient_info.get('Data de Nascimento', 'N/A')],
                ['Sexo:', patient_info.get('Sexo', 'N/A')],
                ['Telefone:', patient_info.get('Telefone', 'N/A')],
                ['Registro:', str(patient_info.get('N√∫mero de Registro', 'N/A'))]
            ]
            
            patient_table = Table(patient_data, colWidths=[2*inch, 3*inch])
            patient_table.setStyle(TableStyle([
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 12),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ]))
            story.append(patient_table)
            story.append(Spacer(1, 20))
        
        # Dados antropom√©tricos
        anthro = self.get_anthropometry_data()
        if anthro:
            story.append(Paragraph("Avalia√ß√£o Antropom√©trica", styles['Heading2']))
            
            imc = self.calculate_imc()
            imc_classification, _ = self.classify_imc(imc) if imc else ("N/A", "")
            
            anthro_data = [
                ['Peso Atual:', f"{anthro.get('Peso Atual (kg)', 'N/A')} kg"],
                ['Altura:', f"{anthro.get('Altura (cm)', 'N/A')} cm"],
                ['IMC:', f"{imc:.1f}" if imc else "N/A"],
                ['Classifica√ß√£o IMC:', imc_classification],
                ['Circunfer√™ncia do Bra√ßo:', f"{anthro.get('Circunfer√™ncia do Bra√ßo (cm)', 'N/A')} cm"],
                ['% Gordura Corporal:', f"{anthro.get('Percentual de Gordura Corporal (%)', 'N/A')}%"]
            ]
            
            anthro_table = Table(anthro_data, colWidths=[2.5*inch, 2.5*inch])
            anthro_table.setStyle(TableStyle([
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 12),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ]))
            story.append(anthro_table)
            story.append(Spacer(1, 20))
        
        # Avalia√ß√£o MNA
        mna = self.get_mna_data()
        if mna:
            story.append(Paragraph("Avalia√ß√£o MNA", styles['Heading2']))
            
            mna_data = [
                ['Pontua√ß√£o Total:', str(mna.get('Pontua√ß√£o Total', 'N/A'))],
                ['Diagn√≥stico:', mna.get('Diagn√≥stico', 'N/A')]
            ]
            
            mna_table = Table(mna_data, colWidths=[2.5*inch, 2.5*inch])
            mna_table.setStyle(TableStyle([
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 12),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ]))
            story.append(mna_table)
            story.append(Spacer(1, 20))
        
        # Prescri√ß√£o diet√©tica
        if 'PRESCRI√á√ÉO DIET√âTICA' in self.data:
            prescription = self.data['PRESCRI√á√ÉO DIET√âTICA']
            story.append(Paragraph("Prescri√ß√£o Diet√©tica", styles['Heading2']))
            
            prescription_data = [
                ['Tipo de Dieta:', prescription.get('Tipo de Dieta', 'N/A')],
                ['Meta Cal√≥rica:', f"{prescription.get('Meta Cal√≥rica (Kcal/dia)', 'N/A')} kcal/dia"],
                ['Meta de Prote√≠na:', f"{prescription.get('Meta de Prote√≠na (g/dia)', 'N/A')} g/dia"],
                ['Restri√ß√µes:', prescription.get('Restri√ß√µes Alimentare', 'Nenhuma')]
            ]
            
            prescription_table = Table(prescription_data, colWidths=[2.5*inch, 2.5*inch])
            prescription_table.setStyle(TableStyle([
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (0, -1), 'Helvetica-Bold'),
                ('FONTSIZE', (0, 0), (-1, -1), 12),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
            ]))
            story.append(prescription_table)
        
        doc.build(story)
        buffer.seek(0)
        return buffer

def main():
    st.markdown('<h1 class="main-header">üçé Dashboard Nutricional</h1>', unsafe_allow_html=True)
    
    dashboard = NutritionDashboard()
    
    # Sidebar
    st.sidebar.title("üìÅ Carregar Dados")
    uploaded_file = st.sidebar.file_uploader(
        "Selecione o arquivo CSV do paciente",
        type=['csv'],
        help="Fa√ßa upload do arquivo CSV com os dados nutricionais do paciente"
    )
    
    if uploaded_file is not None:
        if dashboard.load_csv_data(uploaded_file):
            st.sidebar.success("‚úÖ Arquivo carregado com sucesso!")
            
            # Informa√ß√µes b√°sicas do paciente
            patient_info = dashboard.get_patient_info()
            
            if patient_info:
                st.sidebar.markdown("### üë§ Informa√ß√µes do Paciente")
                st.sidebar.write(f"**Nome:** {patient_info.get('Nome', 'N/A')}")
                st.sidebar.write(f"**Idade:** {2025 - int(patient_info.get('Data de Nascimento', '1900').split('-')[0])} anos")
                st.sidebar.write(f"**Sexo:** {patient_info.get('Sexo', 'N/A')}")
            
            # Layout principal
            col1, col2, col3, col4 = st.columns(4)
            
            # M√©tricas principais
            anthro = dashboard.get_anthropometry_data()
            imc = dashboard.calculate_imc()
            
            with col1:
                peso = anthro.get('Peso Atual (kg)', 0)
                st.metric("Peso Atual", f"{peso} kg")
            
            with col2:
                altura = anthro.get('Altura (cm)', 0)
                st.metric("Altura", f"{altura} cm")
            
            with col3:
                if imc:
                    classification, color = dashboard.classify_imc(imc)
                    st.metric("IMC", f"{imc:.1f}", help=f"Classifica√ß√£o: {classification}")
                else:
                    st.metric("IMC", "N/A")
            
            with col4:
                mna = dashboard.get_mna_data()
                mna_score = mna.get('Pontua√ß√£o Total', 0)
                st.metric("Score MNA", f"{mna_score}")
            
            st.markdown("---")
            
            # Abas para diferentes visualiza√ß√µes
            tab1, tab2, tab3, tab4 = st.tabs(["üìä Antropometria", "üß™ Exames", "üéØ Avalia√ß√£o MNA", "üçΩÔ∏è Nutri√ß√£o"])
            
            with tab1:
                st.subheader("Dados Antropom√©tricos")
                fig_anthro = dashboard.create_anthropometry_chart()
                st.plotly_chart(fig_anthro, use_container_width=True)
                
                # Tabela detalhada
                col1, col2 = st.columns(2)
                with col1:
                    st.markdown("**Medidas Corporais:**")
                    anthro_display = {
                        "Peso Atual": f"{anthro.get('Peso Atual (kg)', 'N/A')} kg",
                        "Peso Usual": f"{anthro.get('Peso Usual (kg)', 'N/A')} kg",
                        "Circunfer√™ncia Bra√ßo": f"{anthro.get('Circunfer√™ncia do Bra√ßo (cm)', 'N/A')} cm",
                        "Circunfer√™ncia Panturrilha": f"{anthro.get('Circunfer√™ncia da Panturrilha (cm)', 'N/A')} cm"
                    }
                    for key, value in anthro_display.items():
                        st.write(f"‚Ä¢ {key}: {value}")
                
                with col2:
                    st.markdown("**Composi√ß√£o Corporal:**")
                    composition = {
                        "% Gordura Corporal": f"{anthro.get('Percentual de Gordura Corporal (%)', 'N/A')}%",
                        "Massa Muscular": f"{anthro.get('Massa Muscular (kg)', 'N/A')} kg",
                        "Rela√ß√£o Cintura/Quadril": f"{anthro.get('Rela√ß√£o Cintura/Quadril', 'N/A')}"
                    }
                    for key, value in composition.items():
                        st.write(f"‚Ä¢ {key}: {value}")
            
            with tab2:
                st.subheader("Exames Bioqu√≠micos")
                fig_bio = dashboard.create_biochemical_chart()
                st.plotly_chart(fig_bio, use_container_width=True)
                
                bio = dashboard.get_biochemical_data()
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.markdown("**Metabolismo:**")
                    st.write(f"‚Ä¢ Glicose: {bio.get('Glicose (mg/dL)', 'N/A')} mg/dL")
                    st.write(f"‚Ä¢ Ureia: {bio.get('Ureia (mg/dL)', 'N/A')} mg/dL")
                    st.write(f"‚Ä¢ Creatinina: {bio.get('Createina (mg/dL)', 'N/A')} mg/dL")
                
                with col2:
                    st.markdown("**Lip√≠dios:**")
                    st.write(f"‚Ä¢ Colesterol Total: {bio.get('Colesterol total (mg/dL)', 'N/A')} mg/dL")
                    st.write(f"‚Ä¢ HDL: {bio.get('HDL (mg/dL)', 'N/A')} mg/dL")
                    st.write(f"‚Ä¢ LDL: {bio.get('LDL (mg/dL)', 'N/A')} mg/dL")
                
                with col3:
                    st.markdown("**Prote√≠nas:**")
                    st.write(f"‚Ä¢ Albumina: {bio.get('Albumina (g/dL)', 'N/A')} g/dL")
                    st.write(f"‚Ä¢ Hemoglobina: {bio.get('Hemoglobina (g/dL)', 'N/A')} g/dL")
                    st.write(f"‚Ä¢ Ferritina: {bio.get('Ferritina (ng/mL)', 'N/A')} ng/mL")
            
            with tab3:
                st.subheader("Mini Avalia√ß√£o Nutricional (MNA)")
                fig_mna = dashboard.create_mna_radar_chart()
                st.plotly_chart(fig_mna, use_container_width=True)
                
                mna = dashboard.get_mna_data()
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("**Resultado:**")
                    score = mna.get('Pontua√ß√£o Total', 0)
                    diagnosis = mna.get('Diagn√≥stico', 'N/A')
                    
                    if score >= 24:
                        st.success(f"Score: {score} - Estado nutricional normal")
                    elif score >= 17:
                        st.warning(f"Score: {score} - {diagnosis}")
                    else:
                        st.error(f"Score: {score} - Desnutrido")
                
                with col2:
                    st.markdown("**Interpreta√ß√£o:**")
                    st.write("‚Ä¢ 24-30 pontos: Estado nutricional normal")
                    st.write("‚Ä¢ 17-23.5 pontos: Risco de desnutri√ß√£o")
                    st.write("‚Ä¢ < 17 pontos: Desnutri√ß√£o")
            
            with tab4:
                st.subheader("Prescri√ß√£o vs Consumo Nutricional")
                fig_nutrition = dashboard.create_nutrition_goals_chart()
                if fig_nutrition:
                    st.plotly_chart(fig_nutrition, use_container_width=True)
                
                # Plano alimentar
                if 'PRESCRI√á√ÉO DIET√âTICA' in dashboard.data:
                    prescription = dashboard.data['PRESCRI√á√ÉO DIET√âTICA']
                    st.markdown("**Plano Alimentar:**")
                    plan = prescription.get('Plano Alimentar Detalhado', 'N/A')
                    st.write(plan)
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.markdown("**Metas Di√°rias:**")
                        st.write(f"‚Ä¢ Calorias: {prescription.get('Meta Cal√≥rica (Kcal/dia)', 'N/A')} kcal")
                        st.write(f"‚Ä¢ Prote√≠nas: {prescription.get('Meta de Prote√≠na (g/dia)', 'N/A')} g")
                        st.write(f"‚Ä¢ Carboidratos: {prescription.get('Meta de Carboidratos (g/dia)', 'N/A')} g")
                    
                    with col2:
                        st.markdown("**Restri√ß√µes e Suplementos:**")
                        st.write(f"‚Ä¢ Restri√ß√µes: {prescription.get('Restri√ß√µes Alimentare', 'Nenhuma')}")
                        st.write(f"‚Ä¢ Suplementos: {prescription.get('Suplementos Nutricionais', 'Nenhum')}")
            
            st.markdown("---")
            
            # Bot√£o para gerar PDF
            if st.button("üìÑ Gerar Relat√≥rio PDF", type="primary"):
                with st.spinner("Gerando relat√≥rio..."):
                    pdf_buffer = dashboard.generate_pdf_report()
                    
                    st.download_button(
                        label="‚¨áÔ∏è Baixar Relat√≥rio PDF",
                        data=pdf_buffer.getvalue(),
                        file_name=f"relatorio_nutricional_{patient_info.get('Nome', 'paciente').replace(' ', '_')}_{datetime.now().strftime('%Y%m%d')}.pdf",
                        mime="application/pdf"
                    )
                    st.success("‚úÖ Relat√≥rio gerado com sucesso!")
        
        else:
            st.error("‚ùå Erro ao carregar o arquivo. Verifique o formato dos dados.")
    
    else:
        st.info("üëÜ Fa√ßa upload de um arquivo CSV para come√ßar a an√°lise.")
        
        # Instru√ß√µes
        st.markdown("""
        ### üìã Como usar:
        
        1. **Fa√ßa upload do arquivo CSV** com os dados do paciente
        2. **Explore as abas** para visualizar diferentes aspectos da avalia√ß√£o nutricional
        3. **Analise os gr√°ficos** e m√©tricas apresentadas
        4. **Gere um relat√≥rio PDF** para documenta√ß√£o
        
        ### üìä O que voc√™ encontrar√°:
        
        - **Antropometria**: Peso, altura, IMC, composi√ß√£o corporal
        - **Exames**: Resultados bioqu√≠micos e marcadores nutricionais  
        - **Avalia√ß√£o MNA**: Mini avalia√ß√£o nutricional para idosos
        - **Nutri√ß√£o**: Prescri√ß√£o diet√©tica vs consumo atual
        
        ### üéØ Funcionalidades:
        
        - ‚úÖ Dashboard interativo com gr√°ficos din√¢micos
        - ‚úÖ An√°lise autom√°tica de dados nutricionais
        - ‚úÖ Classifica√ß√£o autom√°tica de IMC e MNA
        - ‚úÖ Gera√ß√£o de relat√≥rios em PDF
        - ‚úÖ Interface responsiva e intuitiva
        """)

if __name__ == "__main__":
    main()